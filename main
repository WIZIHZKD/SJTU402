#include <iostream>
#include <cstring>
#include <vector>
#include <string>
#include <sstream>
using namespace std;
class Util {
    // 所需头文件  <sstream>  <vector>  <string>
public:
    // 函数以单个char字符作为分隔符对string字符串进行分割， 并将分割结果存入vector中，最终返回vector<string>
    static std::vector<string> split(const std::string &s, char delimiter) { //  n.	定界符，分隔符;
        std::vector<string> tokens; // 存放结果
        std::string token; // 子串
        std::istringstream tokenStream(s); //使用string s初始化输入流, 标准库头文件 <sstream>
        while (std::getline(tokenStream, token,
                            delimiter)) { //  对于输入流，遇到char的delimiter时 就停止 把结果储存在token中, (同时舍弃遇到的这个char), 定义于<string>
            if (!token.empty()) //因为会遇到连续的delimiter的情况，这时候token就是空，这种情况不要放入tokens当中
                tokens.push_back(token);
        }
        return tokens;
    }

    // 函数以string作为分隔符对string字符串进行分割， 并将分割结果存入vector中，最终返回vector<string>
    static std::vector<string> split(const std::string &s, const std::string &delimiter) { //  n.	定界符，分隔符;
        std::vector<string> tokens; // 存放结果
        std::string token; // 子串
        int i = 0, start = 0, sSize = (int) s.size(), dSize = (int) delimiter.size(); // start为字符子串的起始位置
        while (i < sSize) {
            if (isDelimiter2(s, i, delimiter)) {  // 此处也可以使用isDelimiter(s, i, delimiter)  如果遇到了分隔符
                token = s.substr(start, i - start); // 分割字符串
                if (!token.empty()) { // 因为会遇到连续的delimiter的情况，这时候token就是空，这种情况不要放入tokens当中
                    tokens.push_back(token);
                }
                i += dSize; // 跳过分隔符的长度
                start = i; // 更新子串的起始位置
            } else {
                i++;
            }
        }
        token = s.substr(start, i - start); // 分割字符串
        if (!token.empty()) { //因为会遇到连续的delimiter的情况，这时候token就是空，这种情况不要放入tokens当中
            tokens.push_back(token);
        }
        return tokens;
    }

private:
    // 函数判断字符串s从下标i开始的，长为delimiter的字符子串是否和delimiter全等
    static bool isDelimiter(const std::string &s, int i, const std::string &delimiter) {
        int j = 0, sSize = (int) s.size(), dSize = (int) delimiter.size();
        while (i < sSize && j < dSize) {
            if (s[i] != delimiter[j]) {
                return false;
            } else {
                j++;
                i++;
            }
        }
        return j == dSize;
    }

    // 函数判断字符串s从下标i开始的，长为delimiter的字符子串是否和delimiter全等
    static bool isDelimiter2(const std::string &s, int i, const std::string &delimiter) {

        return s.substr(i, delimiter.size()) == delimiter;
    }

};

struct time{//存放时间
int hour=0;
int day=0;
int month=0;
int year=0;
};



struct Hesuan{//存储核酸结果和日期
string hesuan="无";
time hesuantime;
};



struct Dormitary{
int DormitaryNumber=0;
int StudentQuantity=0;
string ManagerName="未知";
string DormitarySection="(未知)区";
bool fengkong=false;
time starttime;
time endtime;
};



struct STUDENT{
string Name="未知";//字符串
long long int StudentNumber=0;//12位数
long long int Telephone=0;//11位数
string Academy="未知";//字符串
string Class="未知";//字符串
int dormitarynumber=0;
Hesuan Hesuan[10];//可存放10次核酸情况。
int hesuancishu=0;
};

struct Date{
int day=0;
int month=0;
int year=0;
};

struct StudentT{//学生申请结构体
long StudentNumber=0;
string Name="空";
string Area="未知校区";
string Reason="未知原因";
string Academy="未知学院";
Date Enter;
Date Out;
int Condition=0;
};




void Input_dormitaryinformation(Dormitary*dormitary);//输入宿舍信息
void Input_Hesuaninformation(STUDENT*student);//输入核酸信息
void Input_studentinformation(STUDENT*student);//输入学生信息
int StudentInput(STUDENT*student);//综合输入



void StudentInformation(STUDENT*student);
void CommuteManagement(STUDENT*student);



//宿舍管理函数声明
void DormitaryManagement(STUDENT*student,Dormitary*dormitary);//总体
void revise(Dormitary *a,time Today);
bool range1(time a, time b);//比较时间
time datechange(time a,int b);//增加时间
void help1();//一部分共通提示的输出
void help2();//一部分共通提示的输出
void help3();//一部分共通提示的输出
void fresh();
void check2(Dormitary *b);
void check1(Dormitary*dormitary,STUDENT*Student);


extern int studentcounter=0;//学生总数
const time org={0,0,0,0};//时间初始化
const char* code1="SJTU";//系统进入密码
const char* code2="woshilaoshi";//老师进入密码



//宿舍管理模块在前
//刷新时间并同时更新封控情况
void fresh(time Today,Dormitary*dormitary){
    cout<<"请输入今日日期：（格式：年 月 日）\n例如：2020 2 22"<<endl;
    cin>>Today.year>>Today.month>>Today.day;
    for(int i=1;i<=100;i++)
{
    dormitary[i].starttime=Today;
    if(range1(dormitary[i].endtime,Today))
       {
           dormitary[i].endtime=org;
       }
}
}

void revise(Dormitary *a) //修改楼栋信息
{
    int i,k,d;
    cout << "请输入要修改的楼栋号:" << endl;
    cin >> i;
    cout << "press 0: 开始/继续封控" << endl
         << "press 1：停止封控" << endl;
    cin >> k;
    switch (k)
    {
    case 0:
        cout<<"请输入要封控的天数(1-7)"<<endl;
        cin>>d;
        a[i].endtime = datechange(a[i].starttime,d);
        a[i].fengkong= true;
        break;
    case 1:
        a[i].endtime = org;
        a[i].fengkong = false;
        break;
    }
}

bool range1(time a, time b) //日期比较函数
{
    time day1 = a;
    time day2 = b;
    if (day1.year < day2.year)
        return true;
    else if (day1.year==day2.year)
    {
        if (day1.month < day2.month)
            return true;
        if (day1.month == day2.month)
        {
            if (day1.day > day2.day)
                return false;
            else
                return true;
        }
        else return false;
    }
    else return false;
}

void range2(Dormitary *a) //排序
{
    Dormitary b[101];
    Dormitary temp;
    for(int i=1;i<=100;i++)
        b[i]=a[i];//将宿舍信息先进行拷贝
    for(int i=1;i<100;++i)//冒泡排序
    {
        for(int j=1;j<=100-i;++j){
            if(!range1(b[j].endtime,b[j+1].endtime))
            {
                temp = b[j];
                b[j]=b[j+1];
                b[j+1]=temp;
            }
        }
    }
    cout<<"解封先后按楼栋顺序排列为（先解封在前）"<<endl;
    for(int i=1;i<=100;i++)
        cout<<b[i].DormitaryNumber<<" ";
    cout<<endl;
}

time datechange(time c,int b) //封控增加天数
{
    int m[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    if (c.year % 4 == 0 && c.year % 100 != 0 || c.year % 400 == 0)
    m[2]++;
    c.day += b;
    if (c.day > m[c.month])
    {
        c.day -= m[c.month];
        c.month++;
        if (c.month > 12)
        {
            c.month = 1;
            c.year++;
        }
    }
    return c;
}


void check2(Dormitary *b) // 查询楼栋封控状态、起始时间、结束时间
{
    Dormitary a;
    int i;
    cout<<"请输入要查询的楼栋号码(1-100)"<<endl;
    cin>>i;
    if(i>100||i<1)
        cout<<"输入错误！返回上一级"<<endl;
    else{
            a=b[i];
            if (a.fengkong){
                cout << a.DormitarySection <<"的"<<a.DormitaryNumber <<"号楼栋封控起始时间为"<<a.starttime.year<<"年"<<a.starttime.month<<"月"<<a.starttime.day<<"日"<<endl;
                cout<<"结束时间为"<<a.endtime.year<<"年"<<a.endtime.month<<"月"<<a.endtime.day<<"日"<<endl;
            }
            else
                cout << a.DormitarySection <<"的"<< a.DormitaryNumber << "号楼栋未被封控"<<endl;
    }

}


void check1(Dormitary*dormitary,STUDENT*Student) //查询楼栋内人数、每日未做核酸人数以及基本信息
{
    time t;
    int n,k;
    cout<<"请输入要查询的日期"<<endl;
    cin>>t.year>>t.month>>t.day;
    cout<<"请输入要查询的楼栋编码"<<endl;
    cin>>n;
    k=0;
    for (int i=0;i<studentcounter;i++){
            if (Student[i].dormitarynumber==n){
                for(int j=0;j<Student[i].hesuancishu;j++){
                    if(Student[i].Hesuan[j].hesuantime.day==t.day&&Student[i].Hesuan[j].hesuantime.month==t.month&&Student[i].Hesuan[j].hesuantime.year==t.year)
                        k++;
                }
                }
            }
    k=dormitary[n].StudentQuantity-k;
    cout << t.year<<"年"<<t.month<<"月"<<t.day<<"日"<<dormitary[n].DormitarySection <<"的"<<dormitary[n].DormitaryNumber << "号楼栋人数为" << dormitary[n].StudentQuantity << "人，楼长为" << dormitary[n].ManagerName<<"，今日未做核酸人数为"<<k<<endl;
    }


//提示的输出
void help1(){
cout<<"请继续输入相应数字执行相应功能:\n1:修改楼栋封控状态和解封时间\n2:查询楼栋封控状态，起始时间，结束时间\n3:查询楼栋内人数，每日未做核酸人数\n4:显示楼栋解封顺序\n5:退出"<<endl;
}


//提示的输出
void help2(){
cout<<"回到信息导入界面\n请输入相应数字来执行相应功能：\n1:导入学生基本信息\n2:导入某一天的核酸情况\n3:导入宿舍楼信息\n4:退出信息导入"<<endl;
}

//提示的输出
void help3(){
cout<<"回到主界面！\n请输入相应数字来执行相应功能：\n1:信息导入\n2:学生信息上报管理\n3:学生进出校管理\n4:学校宿舍楼管理\n5:退出"<<endl;
}


void DormitaryManagement(STUDENT*student,Dormitary *dormitary){
    time present;
    fresh(present,dormitary);
cout<<"请输入相应数字执行相应功能:\n1:修改楼栋封控状态和解封时间\n2:查询楼栋封控状态，起始时间，结束时间\n3:查询楼栋内人数，每日未做核酸人数\n4:显示楼栋解封顺序\n5:退出"<<endl;
int num;
while(cin>>num){
        switch(num)
    {
       case 1: revise(dormitary);help1();break;
       case 2: check2(dormitary);help1();break;
       case 3: check1(dormitary,student);help1();break;
       case 4: range2(dormitary);help1();break;
       case 5: help3();break;
       default: cout<<"输入错误！请输入1到5中的正整数执行相应功能！"<<endl;
    }
}
}



//输入信息模块
void Input_studentinformation(STUDENT*student,Dormitary*dormitary){//录入学生基本信息
cout<<"请输入学生基本信息（提示：请由中文分号分割不同学生，英文冒号表明相应的信息,中文逗号分割信息，否则可能会出错）\n例如：姓名:xxx，学号:xxx，电话:xxx，学院:xxx，班级:xxx，宿舍楼栋:xxx；"<<endl;
cin.get();
string studentwhole;
getline(cin,studentwhole);
vector<string> splitSemicolon = Util::split(studentwhole, "；");//先按分号进行分割
 for (int i = 0; i < splitSemicolon.size(); ++i){
vector<string> splitComma = Util::split(splitSemicolon[i], "，");//再按逗号分割
for (int j = 0; j < splitComma.size(); ++j)//最后用冒号分割
        {
            vector<string> splitColon = Util::split(splitComma[j], ":");
            if (splitColon[0] == "姓名")
            {
                student[studentcounter].Name = splitColon[1];
            }
            else if (splitColon[0] == "学号")
            {
                student[studentcounter].StudentNumber = atoll(splitColon[1].c_str());
            }
            else if (splitColon[0] == "电话")
            {
                student[studentcounter].Telephone = atoll(splitColon[1].c_str());
            }
            else if (splitColon[0] == "学院")
            {
                student[studentcounter].Academy = splitColon[1];
            }
            else if (splitColon[0] == "班级")
            {
                student[studentcounter].Class = splitColon[1];
            }
            else if (splitColon[0] == "宿舍楼栋")
            {
                student[studentcounter].dormitarynumber = atoi(splitColon[1].c_str());
                if(student[studentcounter].dormitarynumber>100){
                    cout<<"请输入"<< student[studentcounter].Name<<"的正确的宿舍楼栋"<<endl;
                    cin>>student[studentcounter].dormitarynumber;}
                dormitary[student[studentcounter].dormitarynumber].StudentQuantity++;
            }
        }
        studentcounter++;
    }
    cout<<dormitary[29].StudentQuantity<<endl;
    help2();
}





void Input_Hesuaninformation(STUDENT*student){
   cout<<"请按日期输入学生核酸信息（提示：请由中文分号分割不同学生，英文冒号表明相应的信息,中文逗号分割信息，否则可能会出错）\n例如：学号:xxx，核酸结果:x性，年:xxxx，月:xx，日:xx，时:xxx；"<<endl;
//cin.get();
int m;//用来确定学生的位置
string hesuanwhole;
long long int tempstudentnumber;
getline(cin,hesuanwhole);
cout<<hesuanwhole<<endl;
vector<string> splitSemicolon = Util::split(hesuanwhole, "；");
for (int i = 0; i < splitSemicolon.size(); ++i){
  vector<string> splitComma = Util::split(splitSemicolon[i], "，");
   for (int j = 0; j < splitComma.size(); ++j)
        {
            vector<string>splitColon = Util::split(splitComma[j], ":");
            if (splitColon[0] == "学号")//先单独将学号取出
            {
                    tempstudentnumber=atoll(splitColon[1].c_str());
                    break;
            }
        }
    bool flag=false;//检测学号是否存在
    for(m=0;m<studentcounter;m++)
     {
    if(student[m].StudentNumber==tempstudentnumber)
        {flag=true;break;}
     }
    if(flag){
    for(int j = 0; j < splitComma.size(); ++j){
    vector<string> splitColon = Util::split(splitComma[j], ":");
    if (splitColon[0] == "核酸结果")//先单独将学号取出
            {
                    student[m].Hesuan[student[m].hesuancishu].hesuan=splitColon[1];
            }
    else if (splitColon[0] == "年")
          {
        student[m].Hesuan[student[m].hesuancishu].hesuantime.year=atoi(splitColon[1].c_str());
          }
    else if (splitColon[0] == "月")
          {
        student[m].Hesuan[student[m].hesuancishu].hesuantime.month=atoi(splitColon[1].c_str());
          }
    else if (splitColon[0] == "日")
          {
        student[m].Hesuan[student[m].hesuancishu].hesuantime.day=atoi(splitColon[1].c_str());
          }
    else if (splitColon[0] == "时")
          {
        student[m].Hesuan[student[m].hesuancishu].hesuantime.hour=atoi(splitColon[1].c_str());
          }

      }
     student[m].hesuancishu++;
}
    else{
    cout<<"其中"<<tempstudentnumber<<"学号不存在，请先录入学生基本信息"<<endl;
    }
}
     help2();
}




void Input_dormitaryinformation(Dormitary*dormitary){
    int number,i;
    cout<<"请输入想要设置的宿舍楼栋号码(输入0至100以外的数将自动退出宿舍输入)";
    while(cin>>i)
    {cin.get();
    if(i<=100&&i>=1){
        cout<<"请输入"<<i<<"号宿舍楼的负责人姓名:"<<endl;
        getline(cin,dormitary[i].ManagerName);
        cout<<"请选择"<<i<<"号宿舍楼的分区\n1:东区\n2:西区"<<endl;
        while(cin>>number){
        cin.get();
        if(number==1)
            {dormitary[i].DormitarySection="东区";break;}
        else if(number==2)
            {dormitary[i].DormitarySection="西区";break;}
        else
            cout<<"请输入正确的分区"<<endl;}
        cout<<"请继续输入想要设置的宿舍楼栋号码(输入0至100以外的数将自动退出宿舍输入)";
    }
    else
        break;
    }
    help2();
}




int StudentInput(STUDENT*student,Dormitary*dormitary){
int n;
cout<<"请输入相应数字来执行相应功能：\n1:导入学生基本信息\n2:导入某一天的核酸情况\n3:导入宿舍楼信息\n4:退出信息导入"<<endl;
while(cin>>n){
    switch(n)
    {
    case 1:
        Input_studentinformation(student,dormitary);break;//导入姓名、学号、电话、学院、班级、宿舍楼栋。
    case 2:
        cin.get();Input_Hesuaninformation(student);break;//导入核酸信息
    case 3:
        Input_dormitaryinformation(dormitary);break;//宿舍信息只导入相应的宿舍分区和负责人，宿舍人数由学生基本信息时的宿舍信息计算
    case 4:
        help3();
        return 0;
    default:cout<<"输入错误！请输入1到4中的正整数执行相应功能！"<<endl;
    }
}
}





void StudentInformation(STUDENT*student){
}






void CommuteManagement(StudentT*stu){

}






int main()
{
    STUDENT student[1000];
    Dormitary dormitary[101];
    StudentT stu[1000];
    for(int i=1;i<=100;i++)
    {
        dormitary[i].DormitaryNumber=i;
    }//先对宿舍初始化
    char input[10];//使用前就要先输入密码
    cout << "请输入密码：" ;
    cin.getline(input,10);
    while(strcmp(input,code1)!=0){
        cout<<"密码错误，请输入正确的密码：";
         cin.getline(input,20);
    }
    int num;
    cout<<"请输入相应数字来执行相应功能：\n1:信息导入\n2:学生信息上报管理\n3:学生进出校管理\n4:学校宿舍楼管理\n5:退出"<<endl;
  while(cin>>num){
        switch(num)
    {
       case 1: StudentInput(student,dormitary);break;//信息导入
       case 2: StudentInformation(student);break;//学生信息上报管理
       case 3: CommuteManagement(stu);break;//学生进出校管理
       case 4: DormitaryManagement(student,dormitary);break;//学生宿舍管理
       case 5: cout<<"BYE"<<endl;return 0;
       default: cout<<"输入错误！请输入1到5中的正整数执行相应功能！"<<endl;
    }
    }
    return 0;
}
